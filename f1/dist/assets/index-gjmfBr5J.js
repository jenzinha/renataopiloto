(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))r(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const s of a.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function o(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerPolicy&&(a.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?a.credentials="include":n.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(n){if(n.ep)return;n.ep=!0;const a=o(n);fetch(n.href,a)}})();"serviceWorker"in navigator&&window.addEventListener("load",async()=>{try{let e;e=await navigator.serviceWorker.register("./sw.js",{type:"module"}),console.log("Service worker registrada! üòé",e)}catch(e){console.log("üò• Service worker registro falhou: ",e)}});const D=(e,t)=>t.some(o=>e instanceof o);let B,P;function F(){return B||(B=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function M(){return P||(P=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const v=new WeakMap,g=new WeakMap,h=new WeakMap,m=new WeakMap,E=new WeakMap;function C(e){const t=new Promise((o,r)=>{const n=()=>{e.removeEventListener("success",a),e.removeEventListener("error",s)},a=()=>{o(l(e.result)),n()},s=()=>{r(e.error),n()};e.addEventListener("success",a),e.addEventListener("error",s)});return t.then(o=>{o instanceof IDBCursor&&v.set(o,e)}).catch(()=>{}),E.set(t,e),t}function A(e){if(g.has(e))return;const t=new Promise((o,r)=>{const n=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",s),e.removeEventListener("abort",s)},a=()=>{o(),n()},s=()=>{r(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",a),e.addEventListener("error",s),e.addEventListener("abort",s)});g.set(e,t)}let y={get(e,t,o){if(e instanceof IDBTransaction){if(t==="done")return g.get(e);if(t==="objectStoreNames")return e.objectStoreNames||h.get(e);if(t==="store")return o.objectStoreNames[1]?void 0:o.objectStore(o.objectStoreNames[0])}return l(e[t])},set(e,t,o){return e[t]=o,!0},has(e,t){return e instanceof IDBTransaction&&(t==="done"||t==="store")?!0:t in e}};function S(e){y=e(y)}function x(e){return e===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(t,...o){const r=e.call(p(this),t,...o);return h.set(r,t.sort?t.sort():[t]),l(r)}:M().includes(e)?function(...t){return e.apply(p(this),t),l(v.get(this))}:function(...t){return l(e.apply(p(this),t))}}function $(e){return typeof e=="function"?x(e):(e instanceof IDBTransaction&&A(e),D(e,F())?new Proxy(e,y):e)}function l(e){if(e instanceof IDBRequest)return C(e);if(m.has(e))return m.get(e);const t=$(e);return t!==e&&(m.set(e,t),E.set(t,e)),t}const p=e=>E.get(e);function N(e,t,{blocked:o,upgrade:r,blocking:n,terminated:a}={}){const s=indexedDB.open(e,t),d=l(s);return r&&s.addEventListener("upgradeneeded",i=>{r(l(s.result),i.oldVersion,i.newVersion,l(s.transaction),i)}),o&&s.addEventListener("blocked",i=>o(i.oldVersion,i.newVersion,i)),d.then(i=>{a&&i.addEventListener("close",()=>a()),n&&i.addEventListener("versionchange",c=>n(c.oldVersion,c.newVersion,c))}).catch(()=>{}),d}const j=["get","getKey","getAll","getAllKeys","count"],O=["put","add","delete","clear"],f=new Map;function b(e,t){if(!(e instanceof IDBDatabase&&!(t in e)&&typeof t=="string"))return;if(f.get(t))return f.get(t);const o=t.replace(/FromIndex$/,""),r=t!==o,n=O.includes(o);if(!(o in(r?IDBIndex:IDBObjectStore).prototype)||!(n||j.includes(o)))return;const a=async function(s,...d){const i=this.transaction(s,n?"readwrite":"readonly");let c=i.store;return r&&(c=c.index(d.shift())),(await Promise.all([c[o](...d),n&&i.done]))[0]};return f.set(t,a),a}S(e=>({...e,get:(t,o,r)=>b(t,o)||e.get(t,o,r),has:(t,o)=>!!b(t,o)||e.has(t,o)}));let u;async function k(){try{u=await N("formula1",1,{upgrade(e,t,o,r){t===0&&(e.createObjectStore("pistaF1",{keyPath:"nomePista"}).createIndex("id","nomePista"),console.log("Banco de dados criado!"))}}),console.log("Banco de dados aberto!")}catch(e){console.log("Erro ao criar/abrir banco: "+e.message)}}window.addEventListener("DOMContentLoaded",async e=>{k(),document.getElementById("btnCadastro").addEventListener("click",T),document.getElementById("btnCarregar").addEventListener("click",w),document.getElementById("btnBuscar").addEventListener("click",W)});async function T(){let e=document.getElementById("nomePista").value,t=document.getElementById("pais").value,o=document.getElementById("quantidadeCurvas").value,r=document.getElementById("dataGrandePremio").value,n=document.getElementById("estiloPista").value,a=document.getElementById("licencaFIA").value,s=document.getElementById("latitude").value,d=document.getElementById("longitude").value;if(!e||!t||!o||!r||!n||!a){console.log("Preencha todos os campos obrigat√≥rios.");return}if(!s||!d){console.log("Preencha os campos de latitude e longitude.");return}const i=await u.transaction("pistaF1","readwrite"),c=i.objectStore("pistaF1");try{await c.add({nomePista:e,pais:t,quantidadeCurvas:o,dataGrandePremio:r,estiloPista:n,licencaFIA:a,latitude:s,longitude:d}),await i.done,V(),document.getElementById("map").style.display="none",console.log("Pista cadastrada com sucesso!")}catch(L){console.error("Erro ao cadastrar pista:",L),i.abort()}}function G(e,t){if(isNaN(e)||isNaN(t)){console.error("Coordenadas inv√°lidas.");return}const o=document.getElementById("mapTitulo");o.style.display="block";const r=new google.maps.LatLng(e,t),n={zoom:10,center:r},a=new google.maps.Map(document.getElementById("map"),n);new google.maps.Marker({position:r,map:a,title:"Local da Pista"}),document.getElementById("map").style.display="block"}async function w(){u===void 0&&console.log("O banco de dados est√° fechado.");const o=await(await(await u.transaction("pistaF1","readonly")).objectStore("pistaF1")).getAll();if(o){const r=o.map(n=>`<center> <div class="item">
                    <p>Nome da Pista: ${n.nomePista}</p>
                    <p>Pa√≠s: ${n.pais}</p>
                    <p>Quantidade de Curvas: ${n.quantidadeCurvas}</p>
                    <p>Data do Grande Pr√™mio: ${n.dataGrandePremio}</p>
                    <p>Grau de Licen√ßa FIA: ${n.licencaFIA}</p>
                    <p>Estilo de pista: ${n.estiloPista}</p>
                    <button class="btnMostrarMapa" data-latitude="${n.latitude}" data-longitude="${n.longitude}">Mostrar Mapa</button>
                    </div> </center>`);I(r.join(" ")),document.querySelectorAll(".btnMostrarMapa").forEach(n=>{n.addEventListener("click",function(){const a=parseFloat(this.getAttribute("data-latitude")),s=parseFloat(this.getAttribute("data-longitude"));G(a,s)})})}}function V(){document.getElementById("nomePista").value="",document.getElementById("pais").value="",document.getElementById("quantidadeCurvas").value="",document.getElementById("dataGrandePremio").value="",document.getElementById("estiloPista").value="",document.getElementById("licencaFIA").value="",document.getElementById("latitude").value="",document.getElementById("longitude").value=""}async function W(){const e=document.getElementById("inputBuscar").value;if(!e){console.log("Nome da pista n√£o fornecido para busca.");return}const r=(await u.transaction("pistaF1","readonly")).objectStore("pistaF1").index("id");try{const n=await r.get(e);if(n){const a=` <center> <div class="item">
                <p>Nome da Pista: ${n.nomePista}</p>
                <p>Pa√≠s: ${n.pais}</p>
                <p>Quantidade de Curvas: ${n.quantidadeCurvas}</p>
                <p>Data do Grande Pr√™mio: ${n.dataGrandePremio}</p>
                <p>Grau de Licen√ßa FIA: ${n.licencaFIA}</p>
                
            </div> </center>`;I(a)}else console.log(`Pista com o nome '${e}' n√£o encontrada.`),I("")}catch(n){console.error("Erro ao buscar pista de F√≥rmula 1:",n)}}async function q(){const e=document.getElementById("inputBuscar").value;if(!e){console.log("Nome da pista n√£o fornecido para exclus√£o.");return}const t=await u.transaction("pistaF1","readwrite"),o=t.objectStore("pistaF1");try{await o.get(e)?(await o.delete(e),await t.done,console.log(`Pista '${e}' deletada com sucesso.`),w()):console.log(`Pista com o nome '${e}' n√£o encontrada para exclus√£o.`)}catch(r){console.error("Erro ao deletar pista de F√≥rmula 1:",r),t.abort()}}document.getElementById("btnDeletar").addEventListener("click",q);function I(e){document.getElementById("resultados").innerHTML=e}
